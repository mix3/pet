// Code generated by protoc-gen-go.
// source: pet.proto
// DO NOT EDIT!

/*
Package pet is a generated protocol buffer package.

It is generated from these files:
	pet.proto

It has these top-level messages:
	Testline
	Testsuite
*/
package pet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Testline_Directive int32

const (
	Testline_NONE Testline_Directive = 0
	Testline_TODO Testline_Directive = 1
	Testline_SKIP Testline_Directive = 2
)

var Testline_Directive_name = map[int32]string{
	0: "NONE",
	1: "TODO",
	2: "SKIP",
}
var Testline_Directive_value = map[string]int32{
	"NONE": 0,
	"TODO": 1,
	"SKIP": 2,
}

func (x Testline_Directive) String() string {
	return proto.EnumName(Testline_Directive_name, int32(x))
}
func (Testline_Directive) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Testline struct {
	Ok          bool                      `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Num         int32                     `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Description string                    `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Directive   Testline_Directive        `protobuf:"varint,4,opt,name=directive,enum=pet.Testline_Directive" json:"directive,omitempty"`
	Explanation string                    `protobuf:"bytes,5,opt,name=explanation" json:"explanation,omitempty"`
	Diagnostic  string                    `protobuf:"bytes,6,opt,name=diagnostic" json:"diagnostic,omitempty"`
	Time        *google_protobuf.Duration `protobuf:"bytes,7,opt,name=time" json:"time,omitempty"`
	Yaml        []byte                    `protobuf:"bytes,8,opt,name=yaml,proto3" json:"yaml,omitempty"`
	SubTests    []*Testline               `protobuf:"bytes,9,rep,name=sub_tests" json:"sub_tests,omitempty"`
}

func (m *Testline) Reset()                    { *m = Testline{} }
func (m *Testline) String() string            { return proto.CompactTextString(m) }
func (*Testline) ProtoMessage()               {}
func (*Testline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Testline) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Testline) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Testline) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Testline) GetDirective() Testline_Directive {
	if m != nil {
		return m.Directive
	}
	return Testline_NONE
}

func (m *Testline) GetExplanation() string {
	if m != nil {
		return m.Explanation
	}
	return ""
}

func (m *Testline) GetDiagnostic() string {
	if m != nil {
		return m.Diagnostic
	}
	return ""
}

func (m *Testline) GetTime() *google_protobuf.Duration {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Testline) GetYaml() []byte {
	if m != nil {
		return m.Yaml
	}
	return nil
}

func (m *Testline) GetSubTests() []*Testline {
	if m != nil {
		return m.SubTests
	}
	return nil
}

type Testsuite struct {
	Ok      bool                      `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Tests   []*Testline               `protobuf:"bytes,2,rep,name=tests" json:"tests,omitempty"`
	Plan    int32                     `protobuf:"varint,3,opt,name=plan" json:"plan,omitempty"`
	Version int32                     `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Time    *google_protobuf.Duration `protobuf:"bytes,5,opt,name=time" json:"time,omitempty"`
}

func (m *Testsuite) Reset()                    { *m = Testsuite{} }
func (m *Testsuite) String() string            { return proto.CompactTextString(m) }
func (*Testsuite) ProtoMessage()               {}
func (*Testsuite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Testsuite) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Testsuite) GetTests() []*Testline {
	if m != nil {
		return m.Tests
	}
	return nil
}

func (m *Testsuite) GetPlan() int32 {
	if m != nil {
		return m.Plan
	}
	return 0
}

func (m *Testsuite) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Testsuite) GetTime() *google_protobuf.Duration {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*Testline)(nil), "pet.Testline")
	proto.RegisterType((*Testsuite)(nil), "pet.Testsuite")
	proto.RegisterEnum("pet.Testline_Directive", Testline_Directive_name, Testline_Directive_value)
}

func init() { proto.RegisterFile("pet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x90, 0xcf, 0x4a, 0x33, 0x31,
	0x14, 0xc5, 0xbf, 0xcc, 0x9f, 0x76, 0x72, 0xa7, 0x9f, 0x96, 0xb8, 0x30, 0x8a, 0x48, 0xe8, 0xc6,
	0xe8, 0x62, 0x0a, 0xf5, 0x15, 0xea, 0x42, 0x84, 0x56, 0xb0, 0x7b, 0x99, 0x76, 0xae, 0x25, 0x38,
	0x9d, 0x0c, 0x93, 0x4c, 0xd1, 0x85, 0x0f, 0xe1, 0x1b, 0x4b, 0x32, 0x0e, 0x52, 0x10, 0xdc, 0x5d,
	0x4e, 0x72, 0xcf, 0xf9, 0x9d, 0x0b, 0xb4, 0x46, 0x9b, 0xd5, 0x8d, 0xb6, 0x9a, 0x85, 0x35, 0xda,
	0xf3, 0xcb, 0xad, 0xd6, 0xdb, 0x12, 0xa7, 0x5e, 0x5a, 0xb7, 0x2f, 0xd3, 0xa2, 0x6d, 0x72, 0xab,
	0x74, 0xd5, 0x7d, 0x9a, 0x7c, 0x06, 0x90, 0xac, 0xd0, 0xd8, 0x52, 0x55, 0xc8, 0x00, 0x02, 0xfd,
	0xca, 0x89, 0x20, 0x32, 0x61, 0x29, 0x84, 0x55, 0xbb, 0xe3, 0x81, 0x20, 0x32, 0x66, 0x27, 0x90,
	0x16, 0x68, 0x36, 0x8d, 0xaa, 0xdd, 0x2a, 0x0f, 0x05, 0x91, 0x94, 0xdd, 0x00, 0x2d, 0x54, 0x83,
	0x1b, 0xab, 0xf6, 0xc8, 0x23, 0x41, 0xe4, 0xd1, 0xec, 0x34, 0x73, 0xf1, 0xbd, 0x5f, 0x36, 0xef,
	0x9f, 0x9d, 0x01, 0xbe, 0xd5, 0x65, 0x5e, 0xf9, 0x6c, 0x1e, 0x7b, 0x03, 0x06, 0x50, 0xa8, 0x7c,
	0x5b, 0x69, 0x63, 0xd5, 0x86, 0x0f, 0xbc, 0x76, 0x05, 0x91, 0x55, 0x3b, 0xe4, 0x43, 0x41, 0x64,
	0x3a, 0x3b, 0xcb, 0x3a, 0xfc, 0xac, 0xc7, 0xcf, 0xe6, 0xdf, 0xf8, 0x6c, 0x04, 0xd1, 0x7b, 0xbe,
	0x2b, 0x79, 0x22, 0x88, 0x1c, 0x31, 0x01, 0xd4, 0xb4, 0xeb, 0x67, 0x8b, 0xc6, 0x1a, 0x4e, 0x45,
	0x28, 0xd3, 0xd9, 0xff, 0x03, 0x96, 0xc9, 0x35, 0xd0, 0x1f, 0x9c, 0x04, 0xa2, 0xc5, 0x72, 0x71,
	0x37, 0xfe, 0xe7, 0xa6, 0xd5, 0x72, 0xbe, 0x1c, 0x13, 0x37, 0x3d, 0x3d, 0xdc, 0x3f, 0x8e, 0x83,
	0xc9, 0x07, 0x50, 0xb7, 0x66, 0x5a, 0x65, 0x0f, 0x6f, 0x72, 0x01, 0x71, 0x97, 0x10, 0xfc, 0x92,
	0xe0, 0x88, 0x5c, 0x43, 0x7f, 0x9d, 0x98, 0x1d, 0xc3, 0x70, 0x8f, 0x8d, 0x71, 0x6d, 0x23, 0x2f,
	0xf4, 0xcd, 0xe2, 0x3f, 0x9a, 0xad, 0x07, 0x5e, 0xba, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x1e,
	0xa5, 0x75, 0xd3, 0xcb, 0x01, 0x00, 0x00,
}
